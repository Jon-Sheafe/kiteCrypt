<?php
namespace Edu\Cnm\KiteCrypt\Test;

use Edu\Cnm\KiteCrypt\{Profile};

// grab the project test parameters
require_once("KiteCryptTest.php");

// grab the class under scrutiny
require_once(dirname(__DIR__) . "/class/autoloader.php");

/**
 * Full PHPUnit test for the Profile class
 *
 * This is a complete PHPUnit test of the Profile class. It is complete because *ALL* mySQL/PDO enabled methods
 * are tested for both invalid and valid inputs.
 *
 * @see Profile
 * @author Jon Sheafe <jsheafe@cnm.edu>
 **/

/**
 * Profile Class creation
 *
 * @author Jon Sheafe <jsheafe@cnm.com>
 * @version 1.0.0
 **/
class ProfileTest extends KiteCryptTest {

	/**
	 * id for profile; this is the primary key
	 * @var int|null $profileId
	 **/
	protected $validProfileId = null;

	/**
	 * User Name for profile;
	 * @var string
	 **/
	protected $validProfileUserName = "John Doe Sr";
	protected $validProfileUserName2 = "Matt of RR";

	/**
	 * Invalid User Name for profile;
	 * @var string
	 * @var string <= 256 characters length
	 **/
	protected $invalidProfileUserName = "PHPUnit test pass if this test fails";

	/**
	 * Public Key X for encryption for profile
	 *
	 * @var string > 256
	 **/
	protected $validProfilePublicKeyX = "dkongdakjoidgneislidkei";

	/**
	 * Public Key X 2 for encryption for profile unique from $validProfilePublicKeyX
	 *
	 * @var string > 256
	 **/
	protected $validProfilePublicKeyX2 = "kdjfoidionvfhosdfhoajd";

	/**
	 * Invalid profile Public Key X;
	 * @var string
	 * @var string > 256 characters length
	 **/
	protected $invalidProfilePublicKeyX = "";

	/**
	 * Valid profile public Key Y
	 * @var string
	 * @var string <= 256 characters length
	 **/
	protected $validProfilePublicKeyY = "kjaokfjgoiajf";

	/**
	 * Public Key Y 2 for encryption for profile unique from $validProfilePublicKeyY
	 *
	 * @var string > 256
	 **/
	protected $validProfilePublicKeyY2 = "djfadjklfaldkfj;";
	/**
	 * Invalid profile public key Y;
	 * @var string
	 * @var string > 256 characters length
	 **/
	protected $invalidProfilePublicKeyY = "dkajoikfdkgnakdgjgnakdfgjadjnaocjnviajnkjcajbcnadjfjadsnfajxcnviadigfasdnvcjbivbna;vbadskdjcnvkjafjadnvkjnc vbkjasnvkjadsbsvbaskjvnkajsbdvjiafngvdkajdlkjfalkdjflkadjofijadksflaldksjflkjadslfkjasdidjfoadssfvkdsclkfvndsalkfdjafl;kdalkfjdjflkadjflkajdslkfjasdlkfjoadsijfoaidsjkjvcnkajbfkdjbn";

	/**
	 * Valid profile Salt testing
	 * @var string
	 **/
	protected $validProfileSalt = "dfvnoint323fdndoo;";


	protected $profile; // profile

	/**
	 * constructor for this Profile
	 *
	 * @param int|null $newProfileId id of profile or null if a new profile.
	 * @param string $newProfileUserName string containing user name
	 * @param string $newProfilePublicKey string containing user public key data for encryption.
	 * @throws string for invalid argument
	 **/

	public final function setUp() {
		//run the default setup() method first
		parent::setUp();

	}

	/**
	 * Test adding to many characters to public key
	 **/

	/**
	 * test inserting a valid profile and verify that the actual mySQL data matches
	 **/
	public function testInsertValidProfile() {
		// clean out database
		parent::getTearDownOperation();

		//count the number of rows and save it for later
		$numRows = $this->getConnection()->getRowCount("profile");

		// create a new profile and insert to mySQL
		$profile = new Profile($this->validProfileId, $this->validProfileUserName, $this->validProfilePublicKeyX, $this->validProfilePublicKeyY, $this->validProfileSalt);
		$profile->insert($this->getPDO());

		// grab the data from mySQL and enforce the fields match our expectations
		$pdoProfile = Profile::getProfileByProfileId($this->getPDO(), $profile->getProfileId());
		$this->assertEquals($numRows + 1, $this->getConnection()->getRowCount("profile"));
		$this->assertEquals($pdoProfile->getProfileUserName(), $this->validProfileUserName);
		$this->assertEquals($pdoProfile->getProfilePublicKeyX(), $this->validProfilePublicKeyX);
		$this->assertEquals($pdoProfile->getProfilePublicKeyY(), $this->validProfilePublicKeyY);
		$this->assertEquals($pdoProfile->getProfilePasswordSalt(), $this->validProfileSalt);
	}

	/**
	 * test inserting a profile that already exist
	 *
	 * @expectedException PDOException
	 **/
	public function testInsertInvalidProfileName() {
		// create  a profile with a non null profile Id and watch if fail
		$profile = new Profile(KiteCryptTest::INVALID_KEY, $this->validProfileUserName, $this->validProfilePublicKeyX, $this->validProfilePublicKeyY, $this->validProfileSalt);
		$profile->insert($this->getPDO());
	}

	/**
	 * test inserting a profile, edit it, and then updating it
	 **/
	public function testUpdateValidProfile() {
		$numRows = $this->getConnection()->getRowCount("profile");

		// create a new profile and insert into mySQL
		$profile = new Profile(null, $this->validProfileUserName, $this->validProfilePublicKeyX, $this->validProfilePublicKeyY, $this->validProfileSalt);

		$profile->insert($this->getPDO());

		// edit the Profile and update it in mySQL
		$profile->setProfileUserName($this->validProfileUserName2);
		$profile->update($this->getPDO());

		// grab the data from mySQL and enforce the field match our expectations
		$pdoProfile = Profile::getProfileByProfileId($this->getPDO(), $profile->getProfileId());
		$this->assertEquals($numRows + 1, $this->getConnection()->getRowCount("profile"));
		$this->assertEquals($pdoProfile->getProfileUserName(), $this->validProfileUserName2);
		$this->assertEquals($pdoProfile->getProfilePublicKeyX(), $this->validProfilePublicKeyX);
		$this->assertEquals($pdoProfile->getProfilePublicKeyY(), $this->validProfilePublicKeyY);
		$this->assertEquals($pdoProfile->getProfilePasswordSalt(), $this->validProfileSalt);

		// count the number of rows and save it for later
		$numRows = $this->getConnection()->getRowCount("profile");

		// create a new Profile and insert to into mySQL
		$profile = new Profile($this->validProfileId, $this->validProfileUserName, $this->validProfilePublicKeyX, $this->validProfilePublicKeyY, $this->validProfileSalt);
		$profile->insert($this->getPDO());


	}


	/**
	 * test inserting too many characters into public key X
	 *
	 * @expectedException RangeException
	 **/
	public function testTooManyCharactersPublicKeyX() {
		//entered 1025 characters into profilePublicKey field
		$profile = new Profile(null, $this->validProfileUserName, $this->invalidProfilePublicKeyX, $this->validProfilePublicKeyY, $this->validProfileSalt);
		$profile->insert($this->getPDO());
	}


	public function testGetAllValidProfiles() {
		// add data to mysql in order to count
		$profile = new Profile(null, $this->validProfileUserName, $this->validProfilePublicKeyX, $this->validProfilePublicKeyY, $this->validProfileSalt);
		$profile->insert($this->getPDO());
		// add 2nd set of data to mysql in order to count to 2
		$profile2 = new Profile(null, $this->validProfileUserName2, $this->validProfilePublicKeyX2, $this->validProfilePublicKeyY2, $this->validProfileSalt);
		$profile2->insert($this->getPDO());


		// count the number of rows and save it for later
		$numRows = $this->getConnection()->getRowCount("profile");


		// grab the data from mysql and enforce teh fields match our expectation
		$results = Profile::getAllProfiles($this->getPDO());
		$this->assertEquals($numRows, $this->getConnection()->getRowCount("profile"));
		$this->assertCount(2, $results);
		$this->assertContainsOnlyInstancesOf("Edu\\Cnm\\KiteCrypt\\Profile", $results);

		// grab the result from the array and validate it
		$pdoProfile = $results[0];
		$this->assertEquals($pdoProfile->getProfileUserName(), $this->validProfileUserName);
		$this->assertEquals($pdoProfile->getProfilePublicKeyX(), $this->validProfilePublicKeyX);
		$this->assertEquals($pdoProfile->getProfilePublicKeyY(), $this->validProfilePublicKeyY);
		$this->assertEquals($pdoProfile->getProfilePasswordSalt(), $this->validProfileSalt);
	}

	/**
	 * test that two profiles are created, but only one profile is correctly deleted from database.
	 *
	 * @expectedException PDOException
	 **/
	public function testDeleteInvalidTweet() {
		//count the number of rows and save it for later
		$newRows = $this->getConnection()->getRowCount("profile");

		// create two profiles in order for one to be deleted
		$profile = new Profile($this->validProfileId, $this->validProfileUserName, $this->validProfilePublicKeyX, $this->validProfilePublicKeyY, $this->validProfileSalt);
		$profile2 = new Profile($this->validProfileId, $this->validProfileUserName2, $this->validProfilePublicKeyX2, $this->validProfilePublicKeyY2, $this->validProfileSalt);

		// delete the profile2 from mysql
		$this->assertEquals($newRows, $this->getConnection()->getRowCount("profile"));
		$profile->delete($this->getPDO());

		// grab the data from mySQL and enforce the Profile does not exist
		$pdoProfile = Profile::getProfileByProfileId($this->getPDO(), $profile->getProfileId());
		$this->assetCount($pdoProfile);
		$this->assertEquals($newRows, $this->getConnection()->getRowCount("profile"));
	}

	/**
	 * test creating a Profile and then deleting it
	 **/
	public function testDeleteValidTweet() {
		// count the number of rows and save it for later
		$numRows = $this->getConnection()->getRowCount("profile");

		// create a new Profile and insert to into mySQL
		$profile = new Profile(null, $this->validProfileUserName2, $this->validProfilePublicKeyX2, $this->validProfilePublicKeyY2, $this->validProfileSalt);
		$profile->insert($this->getPDO());

		// delete the Profile from mySQL
		$this->assertEquals($numRows + 1, $this->getConnection()->getRowCount("profile"));
		$profile->delete($this->getPDO());

		// grab the data from mySQL and enforce the Profile does not exist
		$pdoProfile = Profile::getProfileByProfileId($this->getPDO(), $profile->getProfileId());
		$this->assertNull($pdoProfile);
		$this->assertEquals($numRows, $this->getConnection()->getRowCount("profile"));
	}

	/**
	 * test grabbing a Profile by profile Public Key Y
	 **/
	public function testGetValidProfileByProfilePublicKeyY() {
		// count the number of rows and save it for later
		$numRows = $this->getConnection()->getRowCount("profile");

		// create a new Profile and insert to into mySQL
		$profile = new Profile($this->validProfileId, $this->validProfileUserName, $this->validProfilePublicKeyX, $this->validProfilePublicKeyY, $this->validProfileSalt);
		$profile->insert($this->getPDO());


		// grab the data from mySQL and enforce the fields match our expectations
		$results = Profile::getProfileByProfilePublicKeyY($this->getPDO(), $profile->getProfilePublicKeyY());
		$this->assertEquals($numRows + 1, $this->getConnection()->getRowCount("profile"));
		$this->assertCount(1, $results);
		$this->assertContainsOnlyInstancesOf("Edu\\Cnm\\KiteCrypt\\Profile", $results);

		// grab the result from the array and validate it
		$pdoProfile = $results[0];
//		$this->assertEquals($pdoProfile->getProfileId(), $this->profile->getProfileId());
		$this->assertEquals($pdoProfile->getProfileUserName(), $this->validProfileUserName);
		$this->assertEquals($pdoProfile->getProfilePublicKeyX(), $this->validProfilePublicKeyX);
		$this->assertEquals($pdoProfile->getProfilePublicKeyY(), $this->validProfilePublicKeyY);
		$this->assertEquals($pdoProfile->getProfilePasswordSalt(), $this->validProfileSalt);


	}





	/**
	 * test grabbing a Profile by profile Public Key X
	 **/
	public function testGetValidProfileByProfilePublicKeyX() {
		// count the number of rows and save it for later
		$numRows = $this->getConnection()->getRowCount("profile");

		// create a new Profile and insert to into mySQL
		$profile = new Profile($this->validProfileId, $this->validProfileUserName, $this->validProfilePublicKeyX, $this->validProfilePublicKeyY, $this->validProfileSalt);
		$profile->insert($this->getPDO());

		// grab the data from mySQL and enforce the fields match our expectations
		$results = Profile::getProfileByProfilePublicKeyX($this->getPDO(), $profile->getProfilePublicKeyX());
		$this->assertEquals($numRows + 1, $this->getConnection()->getRowCount("profile"));
		$this->assertCount(1, $results);
		$this->assertContainsOnlyInstancesOf("Edu\\Cnm\\KiteCrypt\\Profile", $results);

		// grab the result from the array and validate it
		$pdoProfile = $results[0];
		$this->assertEquals($pdoProfile->getProfileUserName(), $this->validProfileUserName);
		$this->assertEquals($pdoProfile->getProfilePublicKeyX(), $this->validProfilePublicKeyX);
		$this->assertEquals($pdoProfile->getProfilePublicKeyY(), $this->validProfilePublicKeyY);
		$this->assertEquals($pdoProfile->getProfilePasswordSalt(), $this->validProfileSalt);
	}

	/**
	 * test deleting a Profile that does not exist
	 *
	 * @expectedException PDOException
	 **/
	public function testDeleteInvalidProfile() {
		// create a Tweet and try to delete it without actually inserting it
		$tweet = new Profile($this->validProfileId, $this->validProfileUserName, $this->validProfilePublicKeyX, $this->validProfilePublicKeyY, $this->validProfileSalt);
		$tweet->delete($this->getPDO());
	}

	/**
	 * test grabbing a Profile by profileUserName that does not exist
	 **/
	public function testGetInvalidProfileByProfileUserName() {
		// grab a tweet by searching for content that does not exist
		$profile = Profile::getProfileByUserName($this->getPDO(), "you will find nothing");
		$this->assertCount(0, $profile);
	}

	/**
	 * test inserting too many characters into public key Y
	 *
	 * @expectedException RangeException
	 **/
	public function testInvalidProfilePublicKeyY() {
		//entered 1025 characters into profilePublicKey field
		$profile = new Profile(null, $this->validProfileUserName, $this->validProfilePublicKeyX, $this->invalidProfilePublicKeyY, $this->validProfileSalt);
		$profile->insert($this->getPDO());
	}

	/**
	 * test inserting too many characters into Password Salt
	 *
	 * @expectedException RangeException
	 **/
	public function testInvalidProfilePasswordSalt() {
		//entered 1025 characters into profilePublicKey field
		$profile = new Profile($this->validProfileId, $this->validProfileUserName, $this->validProfilePublicKeyX, $this->validProfilePublicKeyY, $this->invalidProfilePublicKeyY);
		$profile->insert($this->getPDO());
	}

	/**
	 * test inserting too many characters into User Name
	 *
	 * @expectedException RangeException
	 **/
	public function testInvalidUserName() {
		//entered 1025 characters into profilePublicKey field
		$profile = new Profile($this->validProfileId, $this->invalidProfileUserName, $this->validProfilePublicKeyX, $this->validProfilePublicKeyY, $this->validProfilePublicKeyY);
		$profile->insert($this->getPDO());
	}








}